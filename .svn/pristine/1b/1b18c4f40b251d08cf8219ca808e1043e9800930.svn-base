package com.ncu.txw.mysite.handler;

import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.ncu.txw.mysite.entities.Pet;
import com.ncu.txw.mysite.entities.ShopCar;
import com.ncu.txw.mysite.entities.User;
import com.ncu.txw.mysite.services.PetService;
import com.ncu.txw.mysite.services.ShopCarService;
import com.ncu.txw.mysite.services.UserService;

@Controller
public class Handler{
	
	@Autowired
	private UserService userService;
	
	@Autowired
	private PetService petService;
	
	@Autowired
	private ShopCarService shopCarService;
	
	private ShopCar shopCar = new ShopCar();
	
	@RequestMapping("petDel")
	public String petDel(@RequestParam("id") Integer id, @RequestParam("userName") String userName, 
			@RequestParam(value="petCategory", required=false, defaultValue="cat") String petCategory,
			HttpSession session){
		int index = 0;
		Pet pet = petService.getById(id);
		Pet pet2 = new Pet();
		Iterator it = shopCar.getPets().iterator();
		while (it.hasNext()) {
			Pet p = (Pet)it.next();
			if(p.getId()==id)
				pet2 = shopCar.getPets().remove(index);
			index++;
		}
		
		shopCarService.save(shopCar);
		petService.save(pet);
		int sum = 0;
		for(int i = 0; i < shopCar.getPets().size(); i++){
			sum += shopCar.getPets().get(i).getPetPrice();
		}
		List<Pet> buyPets = shopCar.getPets();
		System.out.println("DEL<+ "+ pet2 +">shopCar:" + buyPets.size());
		session.setAttribute("sum", sum);
		session.setAttribute("shopCar", buyPets);
		return "redirect:/login?userName=" + userName +"&petCategory=" + petCategory;
	}
	
	@RequestMapping("petBuy")
	public String petBuy(@RequestParam("id") Integer id, @RequestParam("userName") String userName, 
			@RequestParam(value="petCategory", required=false, defaultValue="cat") String petCategory,
			HttpSession session){
		Pet pet = petService.getById(id);
		boolean hasPet = false;
		shopCar.setUser(userService.getByUserName(userName));
		Iterator<Pet> it = shopCar.getPets().iterator();
		while (it.hasNext()) {
			Pet p = it.next();
			if(p.getId()==id)
				hasPet = true;
		}
		if(!hasPet){
			shopCar.getPets().add(pet);
			pet.getShopcars().add(shopCar);
			shopCarService.save(shopCar);
			petService.save(pet);
		}
		int sum = 0;
		for(int i = 0; i < shopCar.getPets().size(); i++){
			sum += shopCar.getPets().get(i).getPetPrice();
		}
		List<Pet> buyPets = shopCar.getPets();
		System.out.println("shopCar:" + buyPets.size());
		session.setAttribute("sum", sum);
		session.setAttribute("shopCar", buyPets);
		return "redirect:/login?userName=" + userName +"&petCategory=" + petCategory;
	}
	
	@RequestMapping("petInfo")
	public String petInfo(@RequestParam("id") Integer id, Map<String, Object> map){
		map.put("id", id);
		return "petInfo";
	}
	
	@RequestMapping("/do/register")
	public String doRegister(@RequestParam("userName") String userName,
			@RequestParam("password") String password,
			@RequestParam("email") String email){
		User user = new User(null, userName, password, email);
		userService.save(user);
		return "index";
	}
	
	@ResponseBody
	@RequestMapping(value="/ajaxValidateUserName", method=RequestMethod.POST)
	public String validateLastName(@RequestParam(value="userName", required=true) String userName){
		User user = userService.getByUserName(userName);
		if(user == null){
			return "0";
		}else{
			return "1";
		}
	}
	
	@RequestMapping("/register")
	public String Register(){
		return "register";
	}
	
	@RequestMapping("/login")
	public String Login(@RequestParam(value="pageNo", required=false, defaultValue="1") String pageNoStr,
			@RequestParam(value="petCategory", required=false, defaultValue="cat") String petCategory,
			@RequestParam(value="userName", required=false) String userName,
			@RequestParam(value="password", required=false) String password, 
			Map<String, Object> map,
			HttpSession session){
		if(session.getAttribute("user") == null || 
			(!((User)session.getAttribute("user")).getUserName().equals(userName) && 
					!((User)session.getAttribute("user")).getUserName().equals(""))){
			
			User user = userService.getByUserName(userName);
			if(user == null || !user.getPassword().equals(password)){
				return "index";
			}
			session.setAttribute("user", user);
		}

		int pageNo=1;
		try {
			pageNo = Integer.parseInt(pageNoStr);
			if(pageNo < 1){
				pageNo = 1;
			}
		} catch (Exception e) {}
		
		List<Pet> pets = petService.getByPetCategory(petCategory, pageNo, 5);
		int petSize = petService.getByPetCategory(petCategory).size();
		int pageCount = petSize / 5 + 1;
		session.setAttribute("petCategory", petCategory);
		map.put("pets", pets);
		map.put("pageSize", petSize);
		map.put("pageNo", pageNo);
		map.put("pageCount", pageCount);
		return "list";
	}
	
}
